// ====================================
// KHAI B√ÅO BI·∫æN TO√ÄN C·ª§C
// ====================================

// M·∫£ng l∆∞u tr·ªØ t·∫•t c·∫£ c√¥ng vi·ªác
let tasks = [];

// Bi·∫øn l∆∞u tr·ªØ ID c√¥ng vi·ªác hi·ªán t·∫°i ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a
let editingTaskId = null;

// Bi·∫øn l∆∞u tr·ªØ ID duy nh·∫•t cho m·ªói c√¥ng vi·ªác
let nextTaskId = 1;

// ====================================
// KH·ªûI T·∫†O ·ª®NG D·ª§NG
// ====================================

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi trang web ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', function () {
    initializeApp();
});

// H√†m kh·ªüi t·∫°o ·ª©ng d·ª•ng
function initializeApp() {
    loadTasksFromStorage();
    setupEventListeners();
    renderTasks();
    updateStatistics();
}

// ====================================
// THI·∫æT L·∫¨P C√ÅC S·ª∞ KI·ªÜN
// ====================================

// Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán cho form v√† button
function setupEventListeners() {
    // S·ª± ki·ªán submit form th√™m c√¥ng vi·ªác
    const taskForm = document.getElementById('taskForm');
    taskForm.addEventListener('submit', handleFormSubmit);

    // S·ª± ki·ªán t√¨m ki·∫øm
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', handleSearch);

    // S·ª± ki·ªán l·ªçc theo m·ª©c ƒë·ªô ∆∞u ti√™n
    const filterPriority = document.getElementById('filterPriority');
    filterPriority.addEventListener('change', handleFilterChange);

    // S·ª± ki·ªán x√≥a b·ªô l·ªçc
    const clearFiltersBtn = document.getElementById('clearFilters');
    clearFiltersBtn.addEventListener('click', clearAllFilters);
}

// ====================================
// X·ª¨ L√ù C√ÅC S·ª∞ KI·ªÜN
// ====================================

// X·ª≠ l√Ω s·ª± ki·ªán submit form
function handleFormSubmit(event) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const taskData = {
        title: formData.get('title').trim(),
        priority: formData.get('priority'),
        deadline: formData.get('deadline'),
        completed: false
    };

    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (!validateTaskData(taskData)) {
        return;
    }

    // Th√™m ho·∫∑c c·∫≠p nh·∫≠t c√¥ng vi·ªác
    if (editingTaskId) {
        updateTask(editingTaskId, taskData);
    } else {
        addTask(taskData);
    }

    // Reset form v√† c·∫≠p nh·∫≠t giao di·ªán
    resetForm();
    renderTasks();
    updateStatistics();
    saveTasksToStorage();
}

// X·ª≠ l√Ω t√¨m ki·∫øm
function handleSearch() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const filteredTasks = tasks.filter(task =>
        task.title.toLowerCase().includes(searchTerm)
    );
    renderFilteredTasks(filteredTasks);
}

// X·ª≠ l√Ω l·ªçc theo m·ª©c ƒë·ªô ∆∞u ti√™n
function handleFilterChange() {
    const selectedPriority = document.getElementById('filterPriority').value;
    let filteredTasks = tasks;

    if (selectedPriority) {
        filteredTasks = tasks.filter(task => task.priority === selectedPriority);
    }

    renderFilteredTasks(filteredTasks);
}

// X√≥a t·∫•t c·∫£ b·ªô l·ªçc
function clearAllFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('filterPriority').value = '';
    renderTasks();
}

// ====================================
// QU·∫¢N L√ù C√îNG VI·ªÜC
// ====================================

// Th√™m c√¥ng vi·ªác m·ªõi
function addTask(taskData) {
    const newTask = {
        id: nextTaskId++,
        ...taskData,
        createdAt: new Date().toISOString()
    };

    tasks.push(newTask);
    showNotification('ƒê√£ th√™m c√¥ng vi·ªác m·ªõi th√†nh c√¥ng!', 'success');
}

// C·∫≠p nh·∫≠t c√¥ng vi·ªác
function updateTask(taskId, taskData) {
    const taskIndex = tasks.findIndex(task => task.id === taskId);
    if (taskIndex !== -1) {
        tasks[taskIndex] = {
            ...tasks[taskIndex],
            ...taskData,
            updatedAt: new Date().toISOString()
        };
        showNotification('ƒê√£ c·∫≠p nh·∫≠t c√¥ng vi·ªác th√†nh c√¥ng!', 'success');
    }
}

// X√≥a c√¥ng vi·ªác
function deleteTask(taskId) {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¥ng vi·ªác n√†y?')) {
        tasks = tasks.filter(task => task.id !== taskId);
        renderTasks();
        updateStatistics();
        saveTasksToStorage();
        showNotification('ƒê√£ x√≥a c√¥ng vi·ªác th√†nh c√¥ng!', 'success');
    }
}

// Ch·ªânh s·ª≠a c√¥ng vi·ªác
function editTask(taskId) {
    const task = tasks.find(task => task.id === taskId);
    if (task) {
        // ƒêi·ªÅn d·ªØ li·ªáu v√†o form
        document.getElementById('taskTitle').value = task.title;
        document.getElementById('taskPriority').value = task.priority;
        document.getElementById('taskDeadline').value = task.deadline;

        // ƒê·∫∑t ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
        editingTaskId = taskId;

        // Thay ƒë·ªïi text button
        const submitBtn = document.querySelector('#taskForm button[type="submit"]');
        submitBtn.textContent = 'C·∫≠p Nh·∫≠t C√¥ng Vi·ªác';

        // Cu·ªôn l√™n form
        document.querySelector('.task-form').scrollIntoView({ behavior: 'smooth' });
    }
}

// Thay ƒë·ªïi tr·∫°ng th√°i ho√†n th√†nh
function toggleTaskComplete(taskId) {
    const task = tasks.find(task => task.id === taskId);
    if (task) {
        task.completed = !task.completed;
        task.completedAt = task.completed ? new Date().toISOString() : null;

        renderTasks();
        updateStatistics();
        saveTasksToStorage();

        const message = task.completed ? 'ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh!' : 'ƒê√£ b·ªè ƒë√°nh d·∫•u ho√†n th√†nh!';
        showNotification(message, 'success');
    }
}

// ====================================
// HI·ªÇN TH·ªä GIAO DI·ªÜN
// ====================================

// Hi·ªÉn th·ªã t·∫•t c·∫£ c√¥ng vi·ªác
function renderTasks() {
    renderFilteredTasks(tasks);
}

// Hi·ªÉn th·ªã c√¥ng vi·ªác ƒë√£ l·ªçc
function renderFilteredTasks(filteredTasks) {
    const tasksList = document.getElementById('tasksList');

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ c√¥ng vi·ªác
    if (filteredTasks.length === 0) {
        tasksList.innerHTML = `
            <div class="empty-state">
                <h3>üì≠ Kh√¥ng c√≥ c√¥ng vi·ªác n√†o</h3>
                <p>H√£y th√™m c√¥ng vi·ªác m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu!</p>
            </div>
        `;
        return;
    }

    // S·∫Øp x·∫øp theo m·ª©c ƒë·ªô ∆∞u ti√™n v√† ng√†y h·∫øt h·∫°n
    const sortedTasks = sortTasks(filteredTasks);

    // T·∫°o HTML cho t·ª´ng c√¥ng vi·ªác
    const tasksHTML = sortedTasks.map(task => createTaskHTML(task)).join('');
    tasksList.innerHTML = tasksHTML;
}

// S·∫Øp x·∫øp c√¥ng vi·ªác
function sortTasks(tasks) {
    const priorityOrder = { 'high': 1, 'medium': 2, 'low': 3 };

    return tasks.sort((a, b) => {
        // S·∫Øp x·∫øp c√¥ng vi·ªác ch∆∞a ho√†n th√†nh l√™n tr√™n
        if (a.completed !== b.completed) {
            return a.completed ? 1 : -1;
        }

        // S·∫Øp x·∫øp theo m·ª©c ƒë·ªô ∆∞u ti√™n
        if (a.priority !== b.priority) {
            return priorityOrder[a.priority] - priorityOrder[b.priority];
        }

        // S·∫Øp x·∫øp theo ng√†y h·∫øt h·∫°n
        return new Date(a.deadline) - new Date(b.deadline);
    });
}

// T·∫°o HTML cho m·ªôt c√¥ng vi·ªác
function createTaskHTML(task) {
    const priorityClass = `priority-${task.priority}`;
    const priorityText = getPriorityText(task.priority);
    const formattedDeadline = formatDate(task.deadline);
    const isOverdue = isTaskOverdue(task);
    const overdueClass = isOverdue && !task.completed ? 'overdue' : '';

    return `
        <div class="task-item ${task.completed ? 'completed' : ''} ${overdueClass}">
            <div class="task-header">
                <h3 class="task-title">${escapeHtml(task.title)}</h3>
                <div class="task-actions">
                    <button onclick="editTask(${task.id})" class="btn-edit">‚úèÔ∏è S·ª≠a</button>
                    <button onclick="deleteTask(${task.id})" class="btn-delete">üóëÔ∏è X√≥a</button>
                </div>
            </div>
            
            <div class="task-info">
                <div class="task-detail">
                    <strong>M·ª©c ƒë·ªô ∆∞u ti√™n:</strong> 
                    <span class="${priorityClass}">${priorityText}</span>
                </div>
                <div class="task-detail">
                    <strong>H·∫°n ch√≥t:</strong> 
                    <span>${formattedDeadline}</span>
                    ${isOverdue && !task.completed ? ' <span style="color: red;">‚ö†Ô∏è Qu√° h·∫°n</span>' : ''}
                </div>
                <div class="task-detail">
                    <strong>Tr·∫°ng th√°i:</strong> 
                    <span>${task.completed ? '‚úÖ ƒê√£ ho√†n th√†nh' : '‚è≥ Ch∆∞a ho√†n th√†nh'}</span>
                </div>
            </div>
            
            <div class="task-checkbox">
                <input type="checkbox" 
                       id="task-${task.id}" 
                       ${task.completed ? 'checked' : ''} 
                       onchange="toggleTaskComplete(${task.id})">
                <label for="task-${task.id}">
                    ${task.completed ? 'ƒê√£ ho√†n th√†nh' : 'ƒê√°nh d·∫•u ho√†n th√†nh'}
                </label>
            </div>
        </div>
    `;
}

// C·∫≠p nh·∫≠t th·ªëng k√™
function updateStatistics() {
    const totalTasks = tasks.length;
    const completedTasks = tasks.filter(task => task.completed).length;
    const pendingTasks = totalTasks - completedTasks;
    const highPriorityTasks = tasks.filter(task => task.priority === 'high' && !task.completed).length;

    document.getElementById('totalTasks').textContent = totalTasks;
    document.getElementById('completedTasks').textContent = completedTasks;
    document.getElementById('pendingTasks').textContent = pendingTasks;
    document.getElementById('highPriorityTasks').textContent = highPriorityTasks;
}

// ====================================
// TI·ªÜN √çCH V√Ä HELPER FUNCTIONS
// ====================================

// Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
function validateTaskData(taskData) {
    if (!taskData.title) {
        showNotification('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ c√¥ng vi·ªác!', 'error');
        return false;
    }

    if (!taskData.priority) {
        showNotification('Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô ∆∞u ti√™n!', 'error');
        return false;
    }

    if (!taskData.deadline) {
        showNotification('Vui l√≤ng ch·ªçn ng√†y h·∫øt h·∫°n!', 'error');
        return false;
    }

    // Ki·ªÉm tra ng√†y h·∫øt h·∫°n kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©
    const today = new Date();
    const deadlineDate = new Date(taskData.deadline);
    today.setHours(0, 0, 0, 0);
    deadlineDate.setHours(0, 0, 0, 0);

    if (deadlineDate < today) {
        showNotification('Ng√†y h·∫øt h·∫°n kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©!', 'error');
        return false;
    }

    return true;
}

// Reset form
function resetForm() {
    document.getElementById('taskForm').reset();
    editingTaskId = null;

    // Kh√¥i ph·ª•c text button
    const submitBtn = document.querySelector('#taskForm button[type="submit"]');
    submitBtn.textContent = 'Th√™m C√¥ng Vi·ªác';
}

// L·∫•y text m·ª©c ƒë·ªô ∆∞u ti√™n
function getPriorityText(priority) {
    const priorityMap = {
        'high': 'üî¥ Cao (High)',
        'medium': 'üü° Trung b√¨nh (Medium)',
        'low': 'üü¢ Th·∫•p (Low)'
    };
    return priorityMap[priority] || priority;
}

// ƒê·ªãnh d·∫°ng ng√†y
function formatDate(dateString) {
    const date = new Date(dateString);
    const options = {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        weekday: 'long'
    };
    return date.toLocaleDateString('vi-VN', options);
}

// Ki·ªÉm tra c√¥ng vi·ªác qu√° h·∫°n
function isTaskOverdue(task) {
    if (task.completed) return false;

    const today = new Date();
    const deadlineDate = new Date(task.deadline);
    today.setHours(0, 0, 0, 0);
    deadlineDate.setHours(0, 0, 0, 0);

    return deadlineDate < today;
}

// Escape HTML ƒë·ªÉ tr√°nh XSS
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type = 'info') {
    // T·∫°o element th√¥ng b√°o
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">${getNotificationIcon(type)}</span>
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;

    // Th√™m CSS cho th√¥ng b√°o n·∫øu ch∆∞a c√≥
    if (!document.getElementById('notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
                z-index: 1000;
                animation: slideIn 0.3s ease-out;
                max-width: 400px;
            }
            
            .notification-success {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            
            .notification-error {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
            
            .notification-info {
                background: #d1ecf1;
                color: #0c5460;
                border: 1px solid #bee5eb;
            }
            
            .notification-content {
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .notification-icon {
                font-size: 1.2rem;
            }
            
            .notification-message {
                flex: 1;
            }
            
            .notification-close {
                background: none;
                border: none;
                font-size: 1.5rem;
                cursor: pointer;
                color: inherit;
                opacity: 0.7;
                transition: opacity 0.2s;
            }
            
            .notification-close:hover {
                opacity: 1;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    }

    // Th√™m v√†o DOM
    document.body.appendChild(notification);

    // T·ª± ƒë·ªông x√≥a sau 5 gi√¢y
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

// L·∫•y icon cho th√¥ng b√°o
function getNotificationIcon(type) {
    const icons = {
        'success': '‚úÖ',
        'error': '‚ùå',
        'info': '‚ÑπÔ∏è'
    };
    return icons[type] || icons.info;
}

// ====================================
// L∆ØU TR·ªÆ D·ªÆ LI·ªÜU
// ====================================

// L∆∞u c√¥ng vi·ªác v√†o b·ªô nh·ªõ (s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c thay v√¨ localStorage)
function saveTasksToStorage() {
    // Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng localStorage:
    // localStorage.setItem('tasks', JSON.stringify(tasks));
    // localStorage.setItem('nextTaskId', nextTaskId.toString());

    // Hi·ªán t·∫°i ch·ªâ l∆∞u trong b·ªô nh·ªõ trong phi√™n l√†m vi·ªác
    console.log('ƒê√£ l∆∞u', tasks.length, 'c√¥ng vi·ªác v√†o b·ªô nh·ªõ');
}

// T·∫£i c√¥ng vi·ªác t·ª´ b·ªô nh·ªõ
function loadTasksFromStorage() {
    // Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng localStorage:
    // const savedTasks = localStorage.getItem('tasks');
    // const savedNextId = localStorage.getItem('nextTaskId');

    // if (savedTasks) {
    //     tasks = JSON.parse(savedTasks);
    // }

    // if (savedNextId) {
    //     nextTaskId = parseInt(savedNextId);
    // }

    // Hi·ªán t·∫°i kh·ªüi t·∫°o v·ªõi d·ªØ li·ªáu m·∫´u
    initializeSampleData();
}

// Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u
function initializeSampleData() {
    // Th√™m m·ªôt s·ªë c√¥ng vi·ªác m·∫´u ƒë·ªÉ demo
    const sampleTasks = [
        {
            id: nextTaskId++,
            title: 'Ho√†n th√†nh b√°o c√°o th√°ng',
            priority: 'high',
            deadline: '2025-07-15',
            completed: false,
            createdAt: new Date().toISOString()
        },
        {
            id: nextTaskId++,
            title: 'H·ªçp team ph√°t tri·ªÉn s·∫£n ph·∫©m',
            priority: 'medium',
            deadline: '2025-07-18',
            completed: false,
            createdAt: new Date().toISOString()
        },
        {
            id: nextTaskId++,
            title: 'ƒê·ªçc s√°ch v·ªÅ JavaScript ES6',
            priority: 'low',
            deadline: '2025-07-20',
            completed: true,
            createdAt: new Date().toISOString(),
            completedAt: new Date().toISOString()
        }
    ];

    tasks = sampleTasks;
}

// ====================================
// X·ª¨ L√ù EXPORT/IMPORT D·ªÆ LI·ªÜU
// ====================================

// Xu·∫•t d·ªØ li·ªáu ra file JSON
function exportTasks() {
    const dataStr = JSON.stringify(tasks, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);

    const link = document.createElement('a');
    link.href = url;
    link.download = `tasks_${new Date().toISOString().split('T')[0]}.json`;
    link.click();

    URL.revokeObjectURL(url);
    showNotification('ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!', 'success');
}

// Nh·∫≠p d·ªØ li·ªáu t·ª´ file JSON
function importTasks(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
        try {
            const importedTasks = JSON.parse(e.target.result);

            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng d·ªØ li·ªáu
            if (Array.isArray(importedTasks)) {
                tasks = importedTasks;

                // C·∫≠p nh·∫≠t nextTaskId
                if (tasks.length > 0) {
                    nextTaskId = Math.max(...tasks.map(task => task.id)) + 1;
                }

                renderTasks();
                updateStatistics();
                saveTasksToStorage();
                showNotification('ƒê√£ nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!', 'success');
            } else {
                showNotification('File d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!', 'error');
            }
        } catch (error) {
            showNotification('L·ªói khi ƒë·ªçc file d·ªØ li·ªáu!', 'error');
        }
    };

    reader.readAsText(file);
}

// ====================================
// T√çNH NƒÇNG B·ªî SUNG
// ====================================

// T√¨m ki·∫øm n√¢ng cao
function advancedSearch(searchTerm, filters = {}) {
    let filteredTasks = tasks;

    // T√¨m ki·∫øm theo ti√™u ƒë·ªÅ
    if (searchTerm) {
        filteredTasks = filteredTasks.filter(task =>
            task.title.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }

    // L·ªçc theo m·ª©c ƒë·ªô ∆∞u ti√™n
    if (filters.priority) {
        filteredTasks = filteredTasks.filter(task => task.priority === filters.priority);
    }

    // L·ªçc theo tr·∫°ng th√°i
    if (filters.completed !== undefined) {
        filteredTasks = filteredTasks.filter(task => task.completed === filters.completed);
    }

    // L·ªçc theo ng√†y h·∫øt h·∫°n
    if (filters.deadline) {
        const filterDate = new Date(filters.deadline);
        filteredTasks = filteredTasks.filter(task => {
            const taskDate = new Date(task.deadline);
            return taskDate.toDateString() === filterDate.toDateString();
        });
    }

    return filteredTasks;
}

// Th·ªëng k√™ n√¢ng cao
function getAdvancedStatistics() {
    const stats = {
        total: tasks.length,
        completed: tasks.filter(task => task.completed).length,
        pending: tasks.filter(task => !task.completed).length,
        overdue: tasks.filter(task => isTaskOverdue(task)).length,
        byPriority: {
            high: tasks.filter(task => task.priority === 'high').length,
            medium: tasks.filter(task => task.priority === 'medium').length,
            low: tasks.filter(task => task.priority === 'low').length
        },
        completionRate: tasks.length > 0 ? (tasks.filter(task => task.completed).length / tasks.length * 100).toFixed(1) : 0
    };

    return stats;
}

// S·∫Øp x·∫øp c√¥ng vi·ªác theo nhi·ªÅu ti√™u ch√≠
function sortTasksBy(criteria, order = 'asc') {
    return tasks.sort((a, b) => {
        let valueA, valueB;

        switch (criteria) {
            case 'title':
                valueA = a.title.toLowerCase();
                valueB = b.title.toLowerCase();
                break;
            case 'priority':
                const priorityOrder = { 'high': 1, 'medium': 2, 'low': 3 };
                valueA = priorityOrder[a.priority];
                valueB = priorityOrder[b.priority];
                break;
            case 'deadline':
                valueA = new Date(a.deadline);
                valueB = new Date(b.deadline);
                break;
            case 'created':
                valueA = new Date(a.createdAt);
                valueB = new Date(b.createdAt);
                break;
            default:
                return 0;
        }

        if (order === 'desc') {
            return valueA > valueB ? -1 : valueA < valueB ? 1 : 0;
        } else {
            return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
        }
    });
}

// ====================================
// CONSOLE COMMANDS (Cho developer)
// ====================================

// Th√™m c√°c h√†m global cho console debugging
window.TaskManager = {
    // Hi·ªÉn th·ªã t·∫•t c·∫£ c√¥ng vi·ªác
    showAllTasks: () => {
        console.table(tasks);
    },

    // Th√™m c√¥ng vi·ªác m·∫´u
    addSampleTask: () => {
        const sampleTask = {
            id: nextTaskId++,
            title: `C√¥ng vi·ªác m·∫´u ${nextTaskId}`,
            priority: 'medium',
            deadline: '2025-07-25',
            completed: false,
            createdAt: new Date().toISOString()
        };
        tasks.push(sampleTask);
        renderTasks();
        updateStatistics();
        saveTasksToStorage();
        console.log('ƒê√£ th√™m c√¥ng vi·ªác m·∫´u:', sampleTask);
    },

    // X√≥a t·∫•t c·∫£ c√¥ng vi·ªác
    clearAllTasks: () => {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ c√¥ng vi·ªác?')) {
            tasks = [];
            nextTaskId = 1;
            renderTasks();
            updateStatistics();
            saveTasksToStorage();
            console.log('ƒê√£ x√≥a t·∫•t c·∫£ c√¥ng vi·ªác');
        }
    },

    // Hi·ªÉn th·ªã th·ªëng k√™
    showStats: () => {
        const stats = getAdvancedStatistics();
        console.log('Th·ªëng k√™ chi ti·∫øt:', stats);
    },

    // Xu·∫•t d·ªØ li·ªáu
    export: exportTasks,

    // L·∫•y reference c√°c h√†m ch√≠nh
    tasks: () => tasks,
    addTask: addTask,
    deleteTask: deleteTask,
    editTask: editTask,
    toggleTaskComplete: toggleTaskComplete
};

// Log th√¥ng tin kh·ªüi t·∫°o
console.log('‚úÖ ·ª®ng d·ª•ng Qu·∫£n L√Ω C√¥ng Vi·ªác ƒë√£ s·∫µn s√†ng!');
console.log('üí° S·ª≠ d·ª•ng window.TaskManager ƒë·ªÉ truy c·∫≠p c√°c ch·ª©c nƒÉng trong console');
console.log('üìñ V√≠ d·ª•: window.TaskManager.showAllTasks()');
